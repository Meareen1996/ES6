<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
    <style>
      #canvas {
        box-shadow: 2px 2px 12px rgba(0, 0, 0, 0.5);
      }
    </style>
  </head>
  <body>
    <canvas id="canvas"></canvas>
    <script>
      // 通过声明一个小球的类，然后通过实例化这个小球，然后把小球绘制在图形当中

      // 首先获取一下画布
      // 然后获取一下画布的画图环境
      const canvas = document.querySelector('#canvas');
      const ctx = canvas.getContext('2d');
      //   初始化两个常量，来指定一个画布的分辨率
      const w = (canvas.width = 600);
      const h = (canvas.height = 400);

      class Ball {
        constructor(x, y, r) {
          this.x = x;
          this.y = y;
          this.r = r;
          this.color = `rgba(${~~Ball.rpFn([55, 255])},${~~Ball.rpFn([55, 255])},${~~Ball.rpFn([55, 255])})`;
          return this;
        }
        render(ctx) {
          ctx.save();
          ctx.translate(this.x, this.y);
          ctx.fillStyle = this.color;
          ctx.beginPath();
          ctx.arc(0, 0, this.r, 0, 2 * Math.PI);
          ctx.fill();
          ctx.restore();
          return this;
        }
        static rpFn(arr) {
          let max = Math.max(...arr);
          let min = Math.min(...arr);
          return Math.random() * (max - min) + min;
        }
      }
      //   const ball1 = new Ball(100, 100, 30).render(ctx);
      // 实现继承
      class SuperBall extends Ball {
        constructor(x, y, r) {
          // 继承父类的构造函数,
          // 通过super可以实现子类继承父类的所有属性
          // 在super之前是没有this的
          //super如果你把它当成一个函数，那么它只能在构造函数中调用
          //调用super等于调用了父类的构造函数，继承了父类的属性
          super(x, x, r);
          this.vy = SuperBall.rpFn([2, 4]);
          this.g = SuperBall.rpFn([0.2, 0.4]);
          this.a = 0;
          return this;
        }

        move(ctx) {
          //   SuperBall.rpFn([2, 4]);
          this.y += this.vy;
          this.vy += this.g;
          let current = this.vy * -0.75;
          if (this.y + this.r >= ctx.canvas.height) {
            this.y = ctx.canvas.height - this.r;
            if (Math.abs(current - this.a) < 0.01) return false;
            this.a = this.vy *= -0.75;
          }
          ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
          //super在这里使用的时候，它指的是一个原型对象
          super.render(ctx);
          return true;
        }
      }
      //   const ball1 = new SuperBall(100, 100, 30).render(ctx);

      let ball, timer;
      canvas.onclick = function(e) {
        let x = e.offsetX,
          y = e.offsetY;
        let r = ~~Ball.rpFn([25, 55]);
        ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
        ball = new SuperBall(x, y, r).render(ctx);
        ballMove();
      };

      function ballMove() {
        //   用timer去接收一下动画帧的返回值
        timer = window.requestAnimationFrame(ballMove);
        // console.log(timer);
        if (!ball.move(ctx)) {
          window.cancelAnimationFrame(timer);
        }
      }
    </script>
  </body>
</html>
